一、基础概念
    1、数据分片：垂直分片、水平分片
        垂直分片：
            按照业务拆分的方式称为垂直分片，又称为纵向拆分，它的核心理念是专库专用。
            在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。
            而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。
            垂直分片往往需要对架构和设计进行调整。
            通常来讲，是来不及应对互联网业务需求快速变化的；而且，它也并无法真正的解决单点瓶颈。
            垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。
            如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。

        水平分片：
            水平分片又称为横向拆分。
            相对于垂直分片，它不再将数据根据业务逻辑分类，
            而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，
            每个分片仅包含数据的一部分。
            例如：根据主键分片，偶数主键的记录放入0库（或表），奇数主键的记录放入1库（或表）
            水平分片从理论上突破了单机数据量处理的瓶颈，并且扩展相对自由，是分库分表的标准解决方案。

    2、逻辑表：
        水平拆分的数据库（表）的相同逻辑和数据结构表的总称。
        例：订单数据根据主键尾数拆分为10张表，分别是t_order_0到t_order_9，他们的逻辑表名为t_order。

    3、真实表：
        在分片的数据库中真实存在的物理表。即上个示例中的t_order_0到t_order_9

    4、数据节点：
        数据分片的最小单元。由数据源名称和数据表组成，例：ds_0.t_order_0。

    5、绑定表：
        指分片规则一致的主表和子表。例如：t_order表和t_order_item表，均按照order_id分片，则此两张表互为绑定表关系。
        绑定表之间的多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。

    6、逻辑索引：
        某些数据库（如：PostgreSQL）不允许同一个库存在名称相同索引，某些数据库（如：MySQL）则允许只要同一个表中不存在名称相同的索引即可。
        逻辑索引用于同一个库不允许出现相同索引名称的分表场景，
        需要将同库不同表的索引名称改写为索引名 + 表名，改写之前的索引名称成为逻辑索引。

    7、分片键：
        用于分片的数据库字段，是将数据库(表)水平拆分的关键字段。例：将订单表中的订单主键的尾数取模分片，则订单主键为分片字段。

二、mycat
    
